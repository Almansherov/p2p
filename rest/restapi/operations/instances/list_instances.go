// Code generated by go-swagger; DO NOT EDIT.

package instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ListInstancesHandlerFunc turns a function with the right signature into a list instances handler
type ListInstancesHandlerFunc func(ListInstancesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListInstancesHandlerFunc) Handle(params ListInstancesParams) middleware.Responder {
	return fn(params)
}

// ListInstancesHandler interface for that can handle valid list instances params
type ListInstancesHandler interface {
	Handle(ListInstancesParams) middleware.Responder
}

// NewListInstances creates a new http.Handler for the list instances operation
func NewListInstances(ctx *middleware.Context, handler ListInstancesHandler) *ListInstances {
	return &ListInstances{Context: ctx, Handler: handler}
}

/*ListInstances swagger:route GET /instance instances listInstances

List P2P instances

List all p2p instances

*/
type ListInstances struct {
	Context *middleware.Context
	Handler ListInstancesHandler
}

func (o *ListInstances) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListInstancesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
