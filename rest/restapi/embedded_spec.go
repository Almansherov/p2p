// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Subutai P2P operations",
    "title": "Subutai P2P",
    "termsOfService": "https://subutai.io",
    "contact": {
      "email": "msavochkin@optimal-dynamics.com"
    },
    "license": {
      "name": "GPLv3",
      "url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
    },
    "version": "6.3.0"
  },
  "host": "localhost",
  "basePath": "/v1",
  "paths": {
    "/daemon": {
      "get": {
        "description": "Returns information about P2P daemon",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "daemon"
        ],
        "summary": "Get daemon information",
        "operationId": "DaemonInfo",
        "responses": {
          "200": {
            "description": "Sucessful operation",
            "schema": {
              "$ref": "#/definitions/Daemon"
            }
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      },
      "post": {
        "description": "Modify daemon options on runtime",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "daemon"
        ],
        "summary": "Modify daemon",
        "operationId": "DaemonOptions",
        "parameters": [
          {
            "description": "Instance configuration",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Log"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful operation"
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      }
    },
    "/instance": {
      "get": {
        "description": "List all p2p instances",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "instances"
        ],
        "summary": "List P2P instances",
        "operationId": "ListInstances",
        "responses": {
          "200": {
            "description": "Sucessful operation",
            "schema": {
              "$ref": "#/definitions/Instances"
            }
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "instances"
        ],
        "summary": "Create new P2P instance",
        "operationId": "CreateInstance",
        "parameters": [
          {
            "description": "Instance configuration",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully created"
          },
          "400": {
            "description": "Bad request"
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      },
      "delete": {
        "description": "This command will shutdown P2P instance",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "instances"
        ],
        "summary": "Destroy P2P instance",
        "operationId": "CloseInstance",
        "parameters": [
          {
            "type": "string",
            "description": "Instance configuration",
            "name": "hash",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully created"
          },
          "400": {
            "description": "Bad request"
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      }
    },
    "/swarm": {
      "get": {
        "description": "Display detailed information about specified instance",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "swarm"
        ],
        "summary": "Display instance information",
        "operationId": "SwarmStatus",
        "parameters": [
          {
            "type": "string",
            "description": "Instance hash",
            "name": "hash",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful operation",
            "schema": {
              "$ref": "#/definitions/InstanceDetails"
            }
          },
          "404": {
            "description": "Hash not found"
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      },
      "post": {
        "description": "Add new crypto keys to an existing swarm",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "swarm"
        ],
        "summary": "Update swarm keys",
        "operationId": "SwarmOptions",
        "parameters": [
          {
            "description": "Instance configuration",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Key"
            }
          },
          {
            "type": "string",
            "description": "Instance hash",
            "name": "hash",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful operation"
          },
          "400": {
            "description": "Bad request"
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      }
    }
  },
  "definitions": {
    "DHT": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "rx": {
          "type": "string"
        },
        "tx": {
          "type": "string"
        }
      }
    },
    "Daemon": {
      "type": "object",
      "properties": {
        "build": {
          "type": "string"
        },
        "dht": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DHT"
          }
        },
        "os": {
          "type": "string"
        },
        "uptime": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "Instance": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string"
        },
        "interface": {
          "$ref": "#/definitions/Interface"
        },
        "key": {
          "$ref": "#/definitions/Key"
        },
        "port": {
          "description": "Specific UDP port or port range [from-to]",
          "type": "string"
        }
      },
      "xml": {
        "name": "Instance"
      }
    },
    "InstanceDetails": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "interface": {
          "$ref": "#/definitions/Interface"
        },
        "peers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Peer"
          }
        },
        "port": {
          "type": "integer"
        },
        "proxies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Proxy"
          }
        }
      }
    },
    "Instances": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Instance"
      }
    },
    "Interface": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string"
        },
        "mac": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Key": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "keyfile": {
          "type": "string"
        },
        "until": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Key"
      }
    },
    "Log": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string",
          "default": "info"
        }
      }
    },
    "Peer": {
      "type": "object",
      "properties": {
        "endpoint": {
          "description": "Active endpoint",
          "type": "string"
        },
        "endpoint_list": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "endpoint_pool": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "description": "Unique ID of this peer",
          "type": "string"
        },
        "interface": {
          "$ref": "#/definitions/Interface"
        },
        "rstate": {
          "description": "State of our peer on remote end",
          "type": "string"
        },
        "state": {
          "description": "State of the peer on our end",
          "type": "string"
        }
      }
    },
    "Proxy": {
      "type": "object",
      "properties": {
        "addr": {
          "description": "UDP address of proxy this instance is connected to",
          "type": "string"
        },
        "endpoint": {
          "description": "UDP address of proxy that was binded for current instance",
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "description": "P2P Instances manipulation",
      "name": "instances"
    },
    {
      "description": "Manipulate single swarms",
      "name": "swarm"
    },
    {
      "description": "Modify daemon behaviour",
      "name": "daemon"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Subutai P2P operations",
    "title": "Subutai P2P",
    "termsOfService": "https://subutai.io",
    "contact": {
      "email": "msavochkin@optimal-dynamics.com"
    },
    "license": {
      "name": "GPLv3",
      "url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
    },
    "version": "6.3.0"
  },
  "host": "localhost",
  "basePath": "/v1",
  "paths": {
    "/daemon": {
      "get": {
        "description": "Returns information about P2P daemon",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "daemon"
        ],
        "summary": "Get daemon information",
        "operationId": "DaemonInfo",
        "responses": {
          "200": {
            "description": "Sucessful operation",
            "schema": {
              "$ref": "#/definitions/Daemon"
            }
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      },
      "post": {
        "description": "Modify daemon options on runtime",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "daemon"
        ],
        "summary": "Modify daemon",
        "operationId": "DaemonOptions",
        "parameters": [
          {
            "description": "Instance configuration",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Log"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful operation"
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      }
    },
    "/instance": {
      "get": {
        "description": "List all p2p instances",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "instances"
        ],
        "summary": "List P2P instances",
        "operationId": "ListInstances",
        "responses": {
          "200": {
            "description": "Sucessful operation",
            "schema": {
              "$ref": "#/definitions/Instances"
            }
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "instances"
        ],
        "summary": "Create new P2P instance",
        "operationId": "CreateInstance",
        "parameters": [
          {
            "description": "Instance configuration",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully created"
          },
          "400": {
            "description": "Bad request"
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      },
      "delete": {
        "description": "This command will shutdown P2P instance",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "instances"
        ],
        "summary": "Destroy P2P instance",
        "operationId": "CloseInstance",
        "parameters": [
          {
            "type": "string",
            "description": "Instance configuration",
            "name": "hash",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully created"
          },
          "400": {
            "description": "Bad request"
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      }
    },
    "/swarm": {
      "get": {
        "description": "Display detailed information about specified instance",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "swarm"
        ],
        "summary": "Display instance information",
        "operationId": "SwarmStatus",
        "parameters": [
          {
            "type": "string",
            "description": "Instance hash",
            "name": "hash",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful operation",
            "schema": {
              "$ref": "#/definitions/InstanceDetails"
            }
          },
          "404": {
            "description": "Hash not found"
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      },
      "post": {
        "description": "Add new crypto keys to an existing swarm",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "swarm"
        ],
        "summary": "Update swarm keys",
        "operationId": "SwarmOptions",
        "parameters": [
          {
            "description": "Instance configuration",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Key"
            }
          },
          {
            "type": "string",
            "description": "Instance hash",
            "name": "hash",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful operation"
          },
          "400": {
            "description": "Bad request"
          },
          "503": {
            "description": "Service unavailable"
          }
        }
      }
    }
  },
  "definitions": {
    "DHT": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "rx": {
          "type": "string"
        },
        "tx": {
          "type": "string"
        }
      }
    },
    "Daemon": {
      "type": "object",
      "properties": {
        "build": {
          "type": "string"
        },
        "dht": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DHT"
          }
        },
        "os": {
          "type": "string"
        },
        "uptime": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "Instance": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string"
        },
        "interface": {
          "$ref": "#/definitions/Interface"
        },
        "key": {
          "$ref": "#/definitions/Key"
        },
        "port": {
          "description": "Specific UDP port or port range [from-to]",
          "type": "string"
        }
      },
      "xml": {
        "name": "Instance"
      }
    },
    "InstanceDetails": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "interface": {
          "$ref": "#/definitions/Interface"
        },
        "peers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Peer"
          }
        },
        "port": {
          "type": "integer"
        },
        "proxies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Proxy"
          }
        }
      }
    },
    "Instances": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Instance"
      }
    },
    "Interface": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string"
        },
        "mac": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Key": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "keyfile": {
          "type": "string"
        },
        "until": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Key"
      }
    },
    "Log": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string",
          "default": "info"
        }
      }
    },
    "Peer": {
      "type": "object",
      "properties": {
        "endpoint": {
          "description": "Active endpoint",
          "type": "string"
        },
        "endpoint_list": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "endpoint_pool": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "description": "Unique ID of this peer",
          "type": "string"
        },
        "interface": {
          "$ref": "#/definitions/Interface"
        },
        "rstate": {
          "description": "State of our peer on remote end",
          "type": "string"
        },
        "state": {
          "description": "State of the peer on our end",
          "type": "string"
        }
      }
    },
    "Proxy": {
      "type": "object",
      "properties": {
        "addr": {
          "description": "UDP address of proxy this instance is connected to",
          "type": "string"
        },
        "endpoint": {
          "description": "UDP address of proxy that was binded for current instance",
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "description": "P2P Instances manipulation",
      "name": "instances"
    },
    {
      "description": "Manipulate single swarms",
      "name": "swarm"
    },
    {
      "description": "Modify daemon behaviour",
      "name": "daemon"
    }
  ]
}`))
}
