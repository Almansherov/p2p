// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Peer peer
// swagger:model Peer
type Peer struct {

	// Active endpoint
	Endpoint string `json:"endpoint,omitempty"`

	// endpoint list
	EndpointList []string `json:"endpoint_list"`

	// endpoint pool
	EndpointPool []string `json:"endpoint_pool"`

	// Unique ID of this peer
	ID string `json:"id,omitempty"`

	// interface
	Interface *Interface `json:"interface,omitempty"`

	// State of our peer on remote end
	Rstate string `json:"rstate,omitempty"`

	// State of the peer on our end
	State string `json:"state,omitempty"`
}

// Validate validates this peer
func (m *Peer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpointList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEndpointPool(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInterface(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Peer) validateEndpointList(formats strfmt.Registry) error {

	if swag.IsZero(m.EndpointList) { // not required
		return nil
	}

	return nil
}

func (m *Peer) validateEndpointPool(formats strfmt.Registry) error {

	if swag.IsZero(m.EndpointPool) { // not required
		return nil
	}

	return nil
}

func (m *Peer) validateInterface(formats strfmt.Registry) error {

	if swag.IsZero(m.Interface) { // not required
		return nil
	}

	if m.Interface != nil {

		if err := m.Interface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interface")
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Peer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Peer) UnmarshalBinary(b []byte) error {
	var res Peer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
